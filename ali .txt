Requirements
Admin Rules
User Management:
1-The admin should have the ability to control user accounts to ensure everything is properly managed.
Chat Oversight:
2-The admin should have the ability to view chat interactions between customers to maintain order and address any issues.
User Rules
1-Property Search:
Users should have the ability to easily search for their dream home using filters for criteria such as location, price range, and property type.
2-Affordability Options:
Users should have the option to view houses that are within their budget, whether for buying or renting.
3-Property Listings:
Users should have the ability to add their own houses for sale or rent without requiring assistance from anyone; the process should be fully self-service through the website.
4-Communication:
Users should have the ability to communicate with each other through the website, facilitating discussions about properties.




Non-Functional Requirements
1-Performance
The website should load within 5 seconds under normal traffic conditions.
Search results should be displayed within 2 seconds of a query.
2-Usability
The website should have an intuitive user interface that is easy to navigate for all users, including those with limited technical skills.
Help documentation should be available to assist users in navigating the site and utilizing its features.
3-Scalability
The system should be able to handle up to 10,000 concurrent users without performance degradation.
The architecture should allow for easy scaling to accommodate future growth.
4-Security
All user data should be encrypted during transmission (e.g., using HTTPS).
User authentication should include strong password requirements and optional two-factor authentication.
Admins should have restricted access to sensitive user information.
5-Availability
The website should have an uptime of 99.9%, ensuring users can access it most of the time.
Maintenance windows should be scheduled during off-peak hours and communicated to users in advance. accounts.




User Persona: Young Adult Home Seeker
Name: mhd ali dabbas
Age: 26
Occupation: University Student
Location: Syria (specific region affected by conflict)
Background:
ali is a young adult who has recently lost his home due to the ongoing conflict in Syria. He is now looking for affordable housing options,
 either to rent or buy. With many families displaced, he finds himself in a challenging housing market and needs a reliable way to find a suitable home.
Goals:
Find a home to rent or buy at an affordable price.
Explore housing options in familiar areas where he feels comfortable and connected.
Access information about available properties quickly and easily.
Frustrations:
Difficulty navigating the housing market due to high demand and limited availability.
Feeling overwhelmed by the number of listings and lack of clear information.
Concerns about the reliability and safety of available housing options.

Architecture:
1. Frontend
React: A JavaScript library for building user interfaces, allowing for a dynamic and responsive web application.
Tailwind CSS: A utility-first CSS framework for styling, enabling rapid UI development with customizable components.
Redux: A state management library for managing application state globally, making it easier to handle complex state interactions in a React application.
Responsibilities:
User Interface: Create a responsive layout for browsing properties, user registration, and property submission.
State Management: Use Redux to manage application state, such as user authentication status, property listings, and chat messages.
API Integration: Communicate with the backend using Axios or Fetch API for data retrieval and submission.
2. Backend
Node.js/Express: A JavaScript runtime and web framework that allows for building scalable server-side applications.
MongoDB: A NoSQL database for storing user data, property listings, chat messages, and reviews in a flexible, document-oriented format.
Responsibilities:
API Development: Create RESTful APIs to handle requests from the frontend, including user authentication, property management, and chat functionalities.
Data Management: Interact with MongoDB to perform CRUD operations on users, properties, and chat messages.
Business Logic: Implement server-side logic to manage user permissions, property searches, and chat interactions.
3. Database
MongoDB:
Schema Design:
User Collection: Store user profiles with attributes such as UserID, Name, Email, Password (hashed), and UserType.
Property Collection: Store property details with attributes like PropertyID, OwnerID, Address, Price, Type, and Description.
Chat Collection: Store chat messages with attributes like ChatID, UserID, PropertyID, Message, and Timestamp.
Review Collection: Store user reviews for properties with attributes like ReviewID, PropertyID, UserID, Rating, and Comment.
DataModels:
password


cI#=]j^l$l)$Ay1C
شىصشققشةخ23